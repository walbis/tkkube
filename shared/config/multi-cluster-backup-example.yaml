schema_version: "1.0.0"
description: "Multi-cluster backup orchestrator configuration example"

# Multi-cluster configuration with backup orchestration
multi_cluster:
  enabled: true
  mode: "parallel"  # Options: sequential, parallel
  default_cluster: "prod-cluster"
  
  clusters:
    # Production cluster with highest priority
    - name: "prod-cluster"
      endpoint: "https://api.prod.k8s.company.com:6443"
      auth:
        method: "service_account"
        service_account:
          token_path: "/var/run/secrets/kubernetes.io/serviceaccount/token"
          ca_cert_path: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      tls:
        insecure: false
        ca_bundle: "/etc/ssl/certs/prod-ca.crt"
      storage:
        type: "s3"
        endpoint: "s3.us-east-1.amazonaws.com"
        access_key: "${PROD_S3_ACCESS_KEY}"
        secret_key: "${PROD_S3_SECRET_KEY}"
        bucket: "prod-cluster-backups"
        use_ssl: true
        region: "us-east-1"
    
    # Staging cluster with medium priority  
    - name: "staging-cluster"
      endpoint: "https://api.staging.k8s.company.com:6443"
      auth:
        method: "token"
        token:
          value: "${STAGING_CLUSTER_TOKEN}"
          type: "bearer"
          refresh_threshold: 300
      tls:
        insecure: false
        ca_data: "${STAGING_CA_CERT_DATA}"
      storage:
        type: "s3"
        endpoint: "s3.us-east-1.amazonaws.com"
        access_key: "${STAGING_S3_ACCESS_KEY}"
        secret_key: "${STAGING_S3_SECRET_KEY}"
        bucket: "staging-cluster-backups"
        use_ssl: true
        region: "us-east-1"
    
    # Development cluster with lower priority
    - name: "dev-cluster"
      endpoint: "https://api.dev.k8s.company.com:6443"
      auth:
        method: "oidc"
        oidc:
          issuer_url: "https://oidc.company.com"
          client_id: "kubernetes-dev"
          client_secret: "${DEV_OIDC_CLIENT_SECRET}"
          id_token: "${DEV_OIDC_ID_TOKEN}"
      tls:
        insecure: false
        cert_data: "${DEV_CLIENT_CERT_DATA}"
        key_data: "${DEV_CLIENT_KEY_DATA}"
      storage:
        type: "minio"
        endpoint: "dev-minio.company.com:9000"
        access_key: "${DEV_MINIO_ACCESS_KEY}"
        secret_key: "${DEV_MINIO_SECRET_KEY}"
        bucket: "dev-cluster-backups"
        use_ssl: false
        region: "us-east-1"
    
    # Testing cluster with lowest priority
    - name: "test-cluster"
      endpoint: "https://api.test.k8s.company.com:6443"
      auth:
        method: "exec"
        exec:
          command: "/usr/local/bin/get-k8s-token"
          args:
            - "--cluster=test"
            - "--format=token"
          env:
            - "KUBECONFIG_CLUSTER=test"
            - "TOKEN_CACHE_DIR=/tmp/k8s-tokens"
      tls:
        insecure: true  # For testing only
      storage:
        type: "minio"
        endpoint: "test-minio.company.com:9000"
        access_key: "${TEST_MINIO_ACCESS_KEY}"
        secret_key: "${TEST_MINIO_SECRET_KEY}"
        bucket: "test-cluster-backups"
        use_ssl: false
        region: "us-east-1"
  
  # Backup coordination settings
  coordination:
    timeout: 1800  # 30 minutes total timeout
    retry_attempts: 3
    failure_threshold: 2  # Allow up to 2 cluster failures
    health_check_interval: "60s"
  
  # Advanced scheduling and load balancing
  scheduling:
    strategy: "priority"  # Options: round_robin, least_loaded, priority
    max_concurrent_clusters: 2  # Run max 2 backups in parallel
    cluster_priorities:
      - cluster: "prod-cluster"
        priority: 1      # Highest priority (backup first)
      - cluster: "staging-cluster"
        priority: 2      # Second priority
      - cluster: "dev-cluster"
        priority: 3      # Third priority
      - cluster: "test-cluster"
        priority: 4      # Lowest priority (backup last)

# Backup configuration (applies to all clusters)
backup:
  filtering:
    mode: "whitelist"
    resources:
      include:
        - deployments
        - services
        - configmaps
        - secrets
        - persistentvolumeclaims
        - statefulsets
        - ingresses
        - horizontalpodautoscalers
        - networkpolicies
        - serviceaccounts
        - roles
        - rolebindings
        - cronjobs
        - jobs
      exclude:
        - events
        - pods
        - replicasets
        - endpoints
        - endpointslices
    namespaces:
      exclude:
        - kube-system
        - kube-public  
        - kube-node-lease
        - default
        - cattle-system  # For Rancher
        - longhorn-system  # For Longhorn storage
        - monitoring  # Prometheus/Grafana (can be restored from config)
        - logging  # ELK stack (logs are transient)
      include:
        - app-*  # Include all application namespaces
        - data-*  # Include all data namespaces
        - web-*  # Include all web namespaces
    label_selector: "backup.enabled=true"
    annotation_selector: ""
  
  behavior:
    batch_size: 50  # Process 50 resources at a time
    validate_yaml: true
    skip_invalid_resources: true
    max_resource_size: "50Mi"  # Increased for larger resources
    include_managed_fields: false
    include_status: false
    follow_owner_references: true  # Include dependent resources
    compression_enabled: true
    encryption_enabled: false  # Set to true for encrypted backups
    incremental_backup: false  # Future feature
    differential_backup: false  # Future feature
  
  cleanup:
    enabled: true
    retention_days: 30  # Keep backups for 30 days
    cleanup_on_startup: false
    cleanup_schedule: "0 2 * * *"  # Clean up daily at 2 AM
    cleanup_batch_size: 100

# Storage configuration template
storage:
  type: minio
  endpoint: "minio.backup.company.com:9000"
  access_key: "${BACKUP_MINIO_ACCESS_KEY}"
  secret_key: "${BACKUP_MINIO_SECRET_KEY}"
  bucket: "multi-cluster-backups"
  use_ssl: false
  region: "us-east-1"
  auto_create_bucket: true

# Cluster configuration (fallback for single-cluster mode)
cluster:
  name: "primary"
  domain: "cluster.local"
  type: "kubernetes"

# GitOps integration for backup metadata
gitops:
  repository:
    url: "git@github.com:company/backup-metadata.git"
    branch: "main"
    auth:
      method: "ssh"
      ssh:
        private_key_path: "~/.ssh/backup_deploy_key"
  
  structure:
    base_dir: "backup-manifests"
    environments:
      - name: production
        cluster_url: "https://api.prod.k8s.company.com:6443"
        auto_sync: false
      - name: staging
        cluster_url: "https://api.staging.k8s.company.com:6443"
        auto_sync: true
      - name: development
        cluster_url: "https://api.dev.k8s.company.com:6443"
        auto_sync: true
    
    argocd:
      enabled: true
      namespace: "argocd"
      project: "backup-system"
      sync_policy:
        automated: false
        prune: false
        self_heal: false

# Pipeline integration for automated workflows
pipeline:
  mode: "parallel"  # Match multi-cluster mode
  automation:
    enabled: true
    trigger_on_backup_complete: true
    wait_for_backup: true
    max_wait_time: 2700  # 45 minutes (30min backup + 15min buffer)
    trigger_methods:
      - "webhook"
      - "process"
    
    webhook_trigger:
      enabled: true
      server_host: "0.0.0.0"
      server_port: 8080
      endpoint_path: "/webhook/multi-cluster-backup-complete"
      authentication:
        enabled: true
        token: "${WEBHOOK_AUTH_TOKEN}"
        header_name: "X-Backup-Auth"
  
  notifications:
    enabled: true
    webhook:
      url: "${BACKUP_WEBHOOK_URL}"
      on_success: true
      on_failure: true
    slack:
      webhook_url: "${SLACK_WEBHOOK_URL}"
      channel: "#backup-alerts"
  
  error_handling:
    continue_on_error: true
    max_retries: 3
    retry_delay: "2m"

# Observability and monitoring
observability:
  metrics:
    enabled: true
    port: 8080
    path: "/metrics"
    backup_duration_buckets: [30, 60, 120, 300, 600, 1200, 1800]  # seconds
    cluster_count_buckets: [1, 2, 4, 8, 16, 32]
    resource_count_buckets: [10, 50, 100, 500, 1000, 5000, 10000]
    
  logging:
    level: "info"
    format: "json"
    file: "/var/log/multi-cluster-backup.log"
    
  tracing:
    enabled: false
    endpoint: ""
    sample_rate: 0.1

# Security configuration
security:
  secrets:
    provider: "env"  # Get secrets from environment variables
  
  network:
    verify_ssl: true
    ca_bundle: "/etc/ssl/certs/ca-certificates.crt"
    request_timeout: "5m"
    max_idle_connections: 10
    max_connections_per_host: 5
  
  validation:
    strict_mode: true
    scan_for_secrets: true
    allowed_secret_types:
      - "kubernetes.io/service-account-token"
      - "kubernetes.io/tls"
      - "Opaque"  # For application secrets
      - "kubernetes.io/dockerconfigjson"

# Performance and resource limits
performance:
  limits:
    max_concurrent_operations: 6  # 2 operations per cluster * 3 clusters
    memory_limit: "8Gi"
    cpu_limit: "4"
    max_backup_size: "10Gi"  # Per cluster
    max_total_backup_size: "40Gi"  # All clusters combined
  
  optimization:
    batch_processing: true
    compression: true
    compression_algorithm: "gzip"  # Options: gzip, lz4, zstd
    caching: true
    cache_ttl: 900  # 15 minutes
    
  http:
    max_idle_conns: 200
    max_conns_per_host: 100
    request_timeout: "300s"  # 5 minutes per HTTP request
    keep_alive_timeout: "30s"

# Feature flags for experimental features
features:
  experimental:
    multi_cluster_support: true
    enhanced_authentication: true
    priority_based_scheduling: true
    load_balancing: true
    circuit_breaker: true
    incremental_backup: false
    differential_sync: false
    backup_encryption: false
    backup_compression: true
    real_time_monitoring: true
  
  preview:
    ui_dashboard: false
    rest_api: false
    backup_verification: true
    automatic_recovery: false
    cross_cluster_restore: false

# Advanced orchestration features
orchestration:
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    recovery_timeout: "5m"
    half_open_max_calls: 3
  
  retry_policy:
    max_attempts: 3
    base_delay: "10s"
    max_delay: "5m" 
    backoff_multiplier: 2.0
    jitter_enabled: true
  
  health_monitoring:
    enabled: true
    check_interval: "30s"
    timeout: "10s"
    failure_threshold: 3
    
  workflow:
    enabled: true
    default_timeout: "45m"
    checkpoint_interval: "10m"
    recovery_enabled: true