schema_version: "1.0.0"
description: "Enhanced authentication test configuration for multi-cluster"

# Legacy single cluster configuration (used as fallback)
storage:
  type: minio
  endpoint: "localhost:9000"
  access_key: "minioadmin"
  secret_key: "minioadmin123"
  bucket: "cluster-backups"
  use_ssl: false
  region: "us-east-1"

cluster:
  name: "primary"
  domain: "cluster.local"
  type: "kubernetes"

# Multi-cluster configuration with enhanced authentication
multi_cluster:
  enabled: true
  mode: "sequential"
  default_cluster: "prod-cluster"
  
  clusters:
    # Production cluster with token authentication and CA bundle
    - name: "prod-cluster"
      endpoint: "https://api.prod.k8s.company.com:6443"
      auth:
        method: "token"
        token:
          value: "${PROD_CLUSTER_TOKEN}"
          type: "bearer"
          refresh_threshold: 300
      tls:
        insecure: false
        ca_bundle: "/etc/ssl/certs/prod-ca.crt"
        server_name: "kubernetes.prod.company.com"
      storage:
        type: "s3"
        endpoint: "s3.us-east-1.amazonaws.com"
        access_key: "prod-access-key"
        secret_key: "prod-secret-key"
        bucket: "prod-cluster-backups"
        use_ssl: true
        region: "us-east-1"
    
    # Staging cluster with service account authentication
    - name: "staging-cluster"
      endpoint: "https://api.staging.k8s.company.com:6443"
      auth:
        method: "service_account"
        service_account:
          token_path: "/var/run/secrets/kubernetes.io/serviceaccount/token"
          ca_cert_path: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      tls:
        insecure: false
        ca_data: "${STAGING_CA_CERT_DATA}"  # base64 encoded
      storage:
        type: "s3"
        endpoint: "s3.us-east-1.amazonaws.com"
        access_key: "staging-access-key"
        secret_key: "staging-secret-key"
        bucket: "staging-cluster-backups"
        use_ssl: true
        region: "us-east-1"
    
    # Development cluster with OIDC authentication
    - name: "dev-cluster"
      endpoint: "https://api.dev.k8s.company.com:6443"
      auth:
        method: "oidc"
        oidc:
          issuer_url: "https://oidc.company.com"
          client_id: "kubernetes-dev"
          client_secret: "${DEV_OIDC_CLIENT_SECRET}"
          id_token: "${DEV_OIDC_ID_TOKEN}"
          refresh_token: "${DEV_OIDC_REFRESH_TOKEN}"
      tls:
        insecure: false
        cert_data: "${DEV_CLIENT_CERT_DATA}"  # base64 encoded
        key_data: "${DEV_CLIENT_KEY_DATA}"    # base64 encoded
      storage:
        type: "minio"
        endpoint: "dev-minio.company.com:9000"
        access_key: "dev-minio-user"
        secret_key: "dev-minio-password"
        bucket: "dev-cluster-backups"
        use_ssl: false
        region: "us-east-1"
    
    # Testing cluster with exec authentication
    - name: "test-cluster"
      endpoint: "https://api.test.k8s.company.com:6443"
      auth:
        method: "exec"
        exec:
          command: "/usr/local/bin/get-k8s-token"
          args:
            - "--cluster=test"
            - "--format=token"
          env:
            - "KUBECONFIG_CLUSTER=test"
            - "TOKEN_CACHE_DIR=/tmp/k8s-tokens"
      tls:
        insecure: true  # For testing only
      storage:
        type: "minio"
        endpoint: "test-minio:9000"
        access_key: "test-user"
        secret_key: "test-password"
        bucket: "test-cluster-backups"
        use_ssl: false
        region: "us-east-1"
  
  # Coordination settings
  coordination:
    timeout: 600
    retry_attempts: 3
    failure_threshold: 2
    health_check_interval: "60s"
  
  # Scheduling and load balancing
  scheduling:
    strategy: "priority"
    max_concurrent_clusters: 2
    cluster_priorities:
      - cluster: "prod-cluster"
        priority: 1      # Highest priority
      - cluster: "staging-cluster"
        priority: 2
      - cluster: "dev-cluster"
        priority: 3
      - cluster: "test-cluster"
        priority: 4      # Lowest priority

# Backup configuration applies to all clusters
backup:
  filtering:
    mode: "whitelist"
    resources:
      include:
        - deployments
        - services
        - configmaps
        - secrets
        - persistentvolumeclaims
        - statefulsets
        - ingresses
      exclude:
        - events
        - pods
        - replicasets
    namespaces:
      exclude:
        - kube-system
        - kube-public
        - kube-node-lease
        - default
  
  behavior:
    batch_size: 25
    validate_yaml: true
    skip_invalid_resources: true
    max_resource_size: "10Mi"
  
  cleanup:
    enabled: true
    retention_days: 14

# GitOps configuration
gitops:
  repository:
    url: "git@github.com:company/k8s-gitops.git"
    branch: "main"
    auth:
      method: "ssh"
      ssh:
        private_key_path: "~/.ssh/id_rsa"
  
  structure:
    base_dir: "clusters"
    environments:
      - name: production
        cluster_url: "https://api.prod.k8s.company.com:6443"
        auto_sync: false
        replicas: 3
      - name: staging
        cluster_url: "https://api.staging.k8s.company.com:6443"
        auto_sync: true
        replicas: 2
      - name: development
        cluster_url: "https://api.dev.k8s.company.com:6443"
        auto_sync: true
        replicas: 1
    
    argocd:
      enabled: true
      namespace: "argocd"
      project: "multi-cluster-backup"
      sync_policy:
        automated: false
        prune: false
        self_heal: false

# Pipeline integration
pipeline:
  mode: "sequential"
  automation:
    enabled: true
    trigger_on_backup_complete: true
    wait_for_backup: true
    max_wait_time: 900
    trigger_methods:
      - "webhook"
      - "process"
    webhook_trigger:
      enabled: true
      server_host: "0.0.0.0"
      server_port: 8080
      endpoint_path: "/webhook/multi-cluster-backup-complete"
  
  notifications:
    enabled: true
    slack:
      webhook_url: "${SLACK_WEBHOOK_URL}"
      channel: "#multi-cluster-backup"
  
  error_handling:
    continue_on_error: true
    max_retries: 2
    retry_delay: "60s"

# Observability
observability:
  metrics:
    enabled: true
    port: 8080
    path: "/metrics"
  
  logging:
    level: "info"
    format: "json"
    file: ""
  
  tracing:
    enabled: false
    endpoint: ""
    sample_rate: 0.1

# Security configuration for multi-cluster
security:
  secrets:
    provider: "env"
  
  network:
    verify_ssl: true
    ca_bundle: "/etc/ssl/certs/ca-certificates.crt"
  
  validation:
    strict_mode: true
    scan_for_secrets: true

# Performance tuning
performance:
  limits:
    max_concurrent_operations: 3  # Conservative for multi-cluster
    memory_limit: "4Gi"
    cpu_limit: "4"
  
  optimization:
    batch_processing: true
    compression: true
    caching: true
    cache_ttl: 600
  
  http:
    max_idle_conns: 100
    max_conns_per_host: 50
    request_timeout: "120s"

# Feature flags
features:
  experimental:
    multi_cluster_support: true
    enhanced_authentication: true
    incremental_backup: false
    differential_sync: false
  
  preview:
    ui_dashboard: false
    rest_api: false