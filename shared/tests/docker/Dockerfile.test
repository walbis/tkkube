# Multi-stage Docker image for running integration tests
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata gcc musl-dev

# Set working directory
WORKDIR /app

# Copy go modules
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build test binaries
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -o test-runner ./tests/cmd/runner

# Runtime stage
FROM alpine:latest

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    curl \
    bash \
    jq \
    kubectl \
    git \
    && rm -rf /var/cache/apk/*

# Install Go for test execution
RUN apk add --no-cache go

# Create test user
RUN addgroup -g 1000 testuser && \
    adduser -D -s /bin/bash -u 1000 -G testuser testuser

# Set working directory
WORKDIR /app

# Copy built binary
COPY --from=builder /app/test-runner /usr/local/bin/test-runner

# Copy test files and source
COPY --chown=testuser:testuser . .

# Create directories for test outputs
RUN mkdir -p /app/test-reports /app/test-artifacts /app/coverage && \
    chown -R testuser:testuser /app

# Switch to test user
USER testuser

# Set environment variables
ENV PATH="/usr/local/bin:${PATH}"
ENV GOCACHE="/app/.cache/go"
ENV GOPATH="/app/go"

# Create cache directories
RUN mkdir -p /app/.cache/go /app/go && \
    chmod -R 755 /app/.cache /app/go

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Default command
CMD ["test-runner"]